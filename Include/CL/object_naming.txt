XXX - Not complete yet!!!

Name Strings

    cl_amd_object_naming

Contributors

    Gilad Yarnitzky, AMD Inc.
    Sigal Algranaty, AMD Inc.
    Avi Shapira, AMD Inc.
    Uri Shomroni, AMD Inc.
    Yaki Tebeka, AMD Inc.

Contact

    Uri Shomroni (uri.shomroni 'at' AMD.com)

IP Status

    None

Version

    Version 1, February 17, 2010

Number

    TBD

Status

    XXX - Incomplete
    Implemented by CodeXL CL (Version X.X or later)

Extension Type

    OpenCL platform extension

Dependencies

    OpenCL 1.0 is required. This extension is written against the OpenCL
    1.0 specification.

Overview

    This extension allows specifying a name string for an OpenCL object,
    to enable easier recognition of specific objects. Supported objects
    are contexts, command queues, buffers, images, samplers, programs,
    kernels and events.

    This extension is expected to be only supported by tools such as 
    debuggers and profilers. Run-time environments are not expected to
    support this extension. This enables using an executable that names
    objects only when run in a debugger / profiler. Recompilation or
    changes to source code are not required thanks to the use of
    OpenCL's extension mechanism.

Header File

    XXX

New Procedures and Functions

    cl_int clNameContextAMD(cl_context context, const char* name,
                                size_t length);

    cl_int clNameCommandQueueAMD(cl_command_queue queue,
                                     const char* name, size_t length);

    cl_int clNameMemObjectAMD(cl_mem memobj, const char* name, 
                                  size_t length);

    cl_int clNameSamplerAMD(cl_sampler sampler, const char* name,
                                size_t length);

    cl_int clNameProgramAMD(cl_program program, const char* name,
                                size_t length);

    cl_int clNameKernelAMD(cl_kernel kernel, const char* name,
                               size_t length);

    cl_int clNameEventAMD(cl_event event, const char* name,
                              size_t length);

New Tokens

    None

Additions to Chapter NNN of the OpenCL 1.0 Specification

    Add new section NNN.XX:

   "NNN.XX Object naming

    The functions

        cl_int clNameContextAMD(cl_context context,
                                    const char* name, size_t length);

        cl_int clNameCommandQueueAMD(cl_command_queue command_queue,
                                         const char* name,
                                         size_t length);

        cl_int clNameMemObjectAMD(cl_mem memobj, const char* name, 
                                      size_t length);

        cl_int clNameSamplerAMD(cl_sampler sampler,
                                    const char* name, size_t length);

        cl_int clNameProgramAMD(cl_program program,
                                    const char* name, size_t length);

        cl_int clNameKernelAMD(cl_kernel kernel, const char* name,
                                   size_t length);

        cl_int clNameEventAMD(cl_event event, const char* name,
                                  size_t length);

    can be used to give names to OpenCL objects.

    <context>, <queue>, <memobj>, <sampler>, <program>, <kernel> or
    <event> is the object to be named.

    <name> is an optionally null-terminated character string.

    <length> is <name>'s length. If <length> is 0, <name> is
    null-terminated.

    Specifying a <length> of 0 and NULL as the <name> clears the object
    name. Attempting to clear an unnamed object's name is silently
    ignored. To rename an object, its former name must first be cleared.

    clNameContextAMD, clNameCommandQueueAMD,
    clNameMemObjectAMD, clNameSamplerAMD, clNameProgramAMD,
    clNameKernelAMD and clNameEventAMD return CL_SUCCESS if the
    object was successfully named. Otherwise they may return

      * CL_INVALID_VALUE if <name> is NULL and <length> is not 0.
      
      * CL_INVALID_OPERATION if <name> is not NULL and the target object
        is already named.

      * CL_INVALID_CONTEXT if <context> is not a valid OpenCL context.

      * CL_INVALID_COMMAND_QUEUE if <queue> is not a valid command-
        queue.

      * CL_INVALID_MEM_OBJECT if <memobj> is not a valid memory object.

      * CL_INVALID_SAMPLER if <sampler> is not a valid sampler object.

      * CL_INVALID_PROGRAM if <program> is not a valid program object.

      * CL_INVALID_KERNEL if <kernel> is not a valid kernel context.

      * CL_INVALID_EVENT if <event> is not a valid event object.

    Naming OpenCL objects makes it easier to identify them inside
    debuggers, profilers and similar tools. The command has no further
    effect on the OpenCL state or compute pipeline."

Interactions with other extensions

    None

Issues

 1) Should kernels be included in this extension?

    DISCUSSION: Yes, kernels have inherent names, being the kernel
    function names. However, being able to name kernels would allow
    giving different names for kernels in different programs which have
    the same function name, as well as differentiate between handles to
    the same kernel (different kernel objects for the same kernel
    function).

 2) Should kernel names persist between different handles of the same
    kernel? I.E. should clNameKernelAMD set the name for the kernel
    object or for the kernel function?

    DISCUSSION: No, clCreateKernel allows to create several kernel
    handles (cl_kernel-s) to the same function in a program. The
    different kernel objects can receive different parameters, and so
    should be able to get different names. This would also be consistent
    with the behavior of clReleaseKernel and clRetainKernel.

    e.g. should a program contain a function called 
    "applyGravityToSpeedsVector", two different kernels could be created
    with different parameters. Naming each kernel object separately
    would allow names such as "Apply earth gravity" and "Apply moon
    gravity", making differentiating the objects easier.

 3) Should events be included in this extension?

    DISCUSSION: Yes, despite events are temporary objects generated to
    allow synchronisation and sampling the execution status of a command
    in a command queue. Naming such temporary objects could have limited
    usefulness, as the events should also be released often during
    runtime. In addition, applications performing repetitive
    computations (such as physics simulations) could generate an event
    per iteration to use for synchronisation, and naming such an event
    would cause many events of the same name to be generated.

    However, the same issues make naming events helpful - when a memory
    leak  of unreleased events is found, having names (or the same name
    repeatedly) for the events would make locating the source of the
    issue much simpler.

 4) Should this extension make a distinction between OpenCL buffers
    and OpenCL images?

    DISCUSSION: No, clReleaseMemObject, clRetainMemObject and
    clGetMemObjectInfo all make no distinction between buffers and
    images, so neither should this extension.

 5) Should this extension allow retrieving the object names after they
    are set?

    DISCUSSION: No, as that would enable making functionality dependant
    on the extension. The intension is that if this extension is
    implemented in an application, its presence should not affect the
    application workflow. Allowing "get" functionality would allow, for
    example, adding branches on an object's name, which would alter the
    application behavior if the extension was not supported by the
    used platform. The extension is meant as a debugging tool, not as a
    bookkeeping method.

    On the other hand, the extension functionality is mostly diagnostic
    in nature, so allowing retrieval of the name would enable users to
    make debug log printouts clearer, etc. - making it more helpful that
    way.

    Furthermore, if the debugger or profiler does not intercept OpenCL
    function calls, it will not be able to get the function names for
    display. However, as the extension is not to be implemented by
    run-time environments, the only way a user would get a handle to the
    naming functions in the first place would be from the debugger or
    profiler exporting them. Should it be decided that the extension
    is to be supported on run-time environments, retrieval would be
    essential to allow middlewares to make use of the extension.

 6) Should the extension be melded with / enlarged to a wider "metadata"
    extension?

    DISCUSSION: No, this extension is supposed to be a lightweight
    solution for ease of identification of object in development tools.
    other object metadata would make this extension more complex as well
    as adding non-diagnostic aspects to its functionality.

Sample Code

    None

Conformance Tests

    None

Revision History

    Version 1, February 16, 2010 (Uri Shomroni) - initial extension
    specification

    Version 2, May 12, 2010 (Uri Shomroni) - added discussion of "get"
    functionality and wider "metadata" scope
